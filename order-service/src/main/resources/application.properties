# SQL dialect for PostgreSql
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# enable hibernate auto creation of tables based on found entities
spring.jpa.hibernate.ddl-auto = update
# show sql in terminal
spring.jpa.hibernate.show-sql = true
# database url
spring.datasource.url = jdbc:postgresql://localhost:5432/order-service
# database user username
spring.datasource.username =ghaith
# database user password
spring.datasource.password =ghaith

#initialize database on application start
spring.datasource.initialization-mode = always
spring.datasource.initialize = true
# continue even with error in data initialization
spring.datasource.continue-on-error = true

# app running port
server.port = 8081

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# Resilience4j configuration

resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

# Resilience4j timeout properties (simulate slow network behavior)
# only wait max of 3s before terminating request to inventory service
resilience4j.timelimiter.instances.inventory.timeout-duration=15s

# Resilience4j Retry properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.inventory.wait-duration=30s

# zipkin (distributed tracing properties)
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability=1.0


# Kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.ghaith.mlika.orderservice.event.OrderPlacedEvent